// Generated by CoffeeScript 1.4.0
(function() {
  var ball_position, ball_velocity, cnvs, controlLoop, copy_2vector, ctx, derivativeGain, draw, error, freq, getFreq, getMouse, integralGain, lastError, mouse, pastErrors, proportionalGain, setpoint, sumError, updateMouse, updateVars, winch, worldTick;

  proportionalGain = .2;

  integralGain = .15;

  derivativeGain = .03;

  freq = 15;

  ctx = {};

  cnvs = {};

  setpoint = {
    'x': 0,
    'y': 0
  };

  mouse = {
    'x': 0,
    'y': 0
  };

  ball_position = {
    'x': 0,
    'y': 0
  };

  ball_velocity = {
    'x': 0,
    'y': 0
  };

  error = {
    'x': 0,
    'y': 0
  };

  lastError = {
    'x': 0,
    'y': 0
  };

  sumError = {
    'x': 0,
    'y': 0
  };

  pastErrors = [];

  updateMouse = function(e) {
    var x, y;
    if (e.offsetX) {
      x = e.offsetX;
      y = e.offsetY;
    } else if (e.layerX) {
      x = e.layerX;
      y = e.layerY;
    }
    return mouse = {
      'x': x,
      'y': y
    };
  };

  getMouse = function() {
    return {
      'x': mouse.x,
      'y': mouse.y
    };
  };

  getFreq = function() {
    return freq;
  };

  controlLoop = function() {
    var dim, errorSlope, velocity, _i, _len, _ref;
    setpoint = getMouse();
    _ref = ['x', 'y'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dim = _ref[_i];
      error[dim] = setpoint[dim] - ball_position[dim];
      velocity = proportionalGain * error[dim];
      sumError[dim] += error[dim];
      velocity += integralGain * sumError[dim];
      errorSlope = error[dim] - lastError[dim];
      velocity += derivativeGain * errorSlope;
      ball_velocity[dim] = velocity;
      lastError[dim] = error[dim];
    }
    pastErrors.unshift(copy_2vector(error));
    if (pastErrors.length > cnvs.width) {
      pastErrors.pop();
    }
    return setTimeout(controlLoop, 1000 / freq);
  };

  copy_2vector = function(v) {
    return {
      'x': v.x,
      'y': v.y
    };
  };

  worldTick = function() {
    ball_position.x += ball_velocity.x;
    ball_position.y += ball_velocity.y;
    if (ball_position.y > cnvs.height) {
      ball_position.y = cnvs.height;
    }
    if (ball_position.x > cnvs.width) {
      ball_position.x = cnvs.width;
    }
    if (ball_position.x < 0) {
      ball_position.x = 0;
    }
    if (ball_position.y < 0) {
      ball_position.y = 0;
    }
    draw();
    return window.requestAnimationFrame(worldTick);
  };

  draw = function() {
    var e, offset, _i, _j, _len, _len1;
    ctx.clearRect(0, 0, cnvs.width, cnvs.height);
    ctx.font = "16px sans-serif";
    ctx.strokeStyle = 'green';
    ctx.fillStyle = 'green';
    ctx.fillText("Time →", 10, 26);
    ctx.beginPath();
    ctx.moveTo(0, cnvs.height / 2);
    offset = 0;
    for (_i = 0, _len = pastErrors.length; _i < _len; _i++) {
      e = pastErrors[_i];
      ctx.lineTo(offset, (cnvs.height / 2) + e.y, 1, 1);
      offset += 1;
    }
    ctx.stroke();
    ctx.strokeStyle = 'orange';
    ctx.fillStyle = 'orange';
    ctx.fillText("Time ↓", 10, 46);
    ctx.beginPath();
    ctx.moveTo(cnvs.width / 2, 0);
    offset = 0;
    for (_j = 0, _len1 = pastErrors.length; _j < _len1; _j++) {
      e = pastErrors[_j];
      ctx.lineTo((cnvs.width / 2) + e.x, offset, 1, 1);
      offset += 1;
    }
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(ball_position.x, ball_position.y, 20, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.strokeStyle = 'black';
    ctx.fillStyle = 'red';
    ctx.fill();
    return ctx.stroke();
  };

  updateVars = function(e) {
    if (e) {
      e.preventDefault();
    }
    if (window.controls.checkValidity()) {
      proportionalGain = window.pbox.value;
      integralGain = window.ibox.value;
      derivativeGain = window.dbox.value;
      freq = window.fbox.value;
      setpoint = {
        'x': 0,
        'y': 0
      };
      mouse = {
        'x': 0,
        'y': 0
      };
      ball_position = {
        'x': 0,
        'y': 0
      };
      ball_velocity = {
        'x': 0,
        'y': 0
      };
      error = {
        'x': 0,
        'y': 0
      };
      lastError = {
        'x': 0,
        'y': 0
      };
      sumError = {
        'x': 0,
        'y': 0
      };
      return pastErrors = [];
    }
  };

  winch = function() {
    cnvs.width = window.innerWidth;
    cnvs.height = 500;
    return updateVars(false);
  };

  window.onload = function() {
    window.pbox = document.getElementById('pbox');
    window.ibox = document.getElementById('ibox');
    window.dbox = document.getElementById('dbox');
    window.fbox = document.getElementById('fbox');
    window.submit = document.getElementById('submit');
    window.controls = document.getElementById('controls');
    window.pbox.value = proportionalGain;
    window.ibox.value = integralGain;
    window.dbox.value = derivativeGain;
    window.fbox.value = freq;
    cnvs = document.getElementById('cnvs');
    ball_position.x = cnvs.width / 2;
    ball_position.y = cnvs.height / 2;
    ctx = cnvs.getContext('2d');
    cnvs.addEventListener('mousemove', function(e) {
      return updateMouse(e);
    });
    window.controls.addEventListener("submit", function(e) {
      return updateVars(e);
    });
    window.addEventListener('resize', winch);
    winch();
    window.requestAnimationFrame(worldTick);
    return controlLoop();
  };

  window.updateVars = updateVars;

}).call(this);
